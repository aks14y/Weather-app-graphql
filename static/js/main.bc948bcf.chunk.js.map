{"version":3,"sources":["Graphql/Queries.js","Pages/Home.js","App.js","index.js"],"names":["GET_WEATHER_QUERY","gql","Home","help","useState","cityDetails","setCityDetails","useLazyQuery","variables","name","getWeather","loading","data","error","console","log","className","Input","type","placeholder","onChange","e","target","value","Button","onClick","getCityByName","weather","temperature","actual","summary","description","wind","speed","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEaA,EAAoBC,YAAH,ygB,QC8DfC,MA3Df,WACE,IAOIC,EAPJ,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA+CC,YAC7CP,EACA,CACEQ,UAAW,CAAEC,KAAMJ,KAHvB,mBAAOK,EAAP,YAAqBC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,KAAMC,EAApC,EAAoCA,MAQpC,OAAIF,EAAgB,yCAChBE,EAAc,wCACdD,GACFE,QAAQC,IAAIH,GAaZ,qCACE,sBAAKI,UAAU,6BAAf,UACE,oBAAIA,UAAU,cAAd,4BACA,cAACC,EAAA,EAAD,CACED,UAAU,0BACVE,KAAK,OACLC,YAAY,YACZC,SAZa,SAACC,GACpBlB,EAAOkB,EAAEC,OAAOC,SAaZ,cAACC,EAAA,EAAD,CAAQC,QAnBd,WACEnB,EAAeH,GACfO,KAiBmCM,UAAU,QAAzC,uBAKF,qBAAKA,UAAU,UAAf,SACGJ,GACC,qCACE,mCAAMA,EAAKc,cAAcjB,KAAzB,OACA,+BACG,IADH,gBAEgBG,EAAKc,cAAcC,QAAQC,YAAYC,UAEvD,+CACgBjB,EAAKc,cAAcC,QAAQG,QAAQC,eAEnD,8CAAiBnB,EAAKc,cAAcC,QAAQK,KAAKC,mB,wBCxC9CC,MAbf,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,+CAGP,OACE,cAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,O,MCHNM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bc948bcf.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_WEATHER_QUERY = gql`\n  query getCityByName($name: String!) {\n    getCityByName(name: $name) {\n      name\n      country\n      weather {\n        summary {\n          title\n          description\n          icon\n        }\n        temperature {\n          actual\n          feelsLike\n          min\n          max\n        }\n        wind {\n          speed\n          deg\n        }\n        clouds {\n          all\n          visibility\n          humidity\n        }\n        timestamp\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Input, Button } from \"reactstrap\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_WEATHER_QUERY } from \"../Graphql/Queries\";\n\nfunction Home() {\n  const [cityDetails, setCityDetails] = useState(\"\");\n  const [getWeather, { loading, data, error }] = useLazyQuery(\n    GET_WEATHER_QUERY,\n    {\n      variables: { name: cityDetails },\n    }\n  );\n  let help;\n\n  if (loading) return <h3>Loading</h3>;\n  if (error) return <h1>error</h1>;\n  if (data) {\n    console.log(data);\n  }\n\n  function handleSubmit() {\n    setCityDetails(help);\n    getWeather();\n  }\n\n  const handleChange = (e) => {\n    help = e.target.value;\n  };\n\n  return (\n    <>\n      <div className=\"row justify-content-center\">\n        <h1 className=\"text-center\">Search weather</h1>\n        <Input\n          className=\"col-1 w-25 align-center\"\n          type=\"text\"\n          placeholder=\"city name\"\n          onChange={handleChange}\n        />\n        <Button onClick={handleSubmit} className=\"col-1\">\n          Search\n        </Button>\n      </div>\n\n      <div className=\"weather\">\n        {data && (\n          <>\n            <h1> {data.getCityByName.name} </h1>\n            <h1>\n              {\" \"}\n              Temperature: {data.getCityByName.weather.temperature.actual}\n            </h1>\n            <h1>\n              Description: {data.getCityByName.weather.summary.description}\n            </h1>\n            <h1>Wind Speed: {data.getCityByName.weather.wind.speed}</h1>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n","import Home from \"./Pages/Home\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"https://graphql-weather-api.herokuapp.com/\",\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Home />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}